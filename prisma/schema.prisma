// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserImages {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId     String   @map("user_id") @db.Uuid
  type       String?  @map("type")
  programId  String?  @map("program_id") @db.Uuid
  fileName   String   @map("file_name")
  base64Data String   @map("base64_data") @db.Text
  createdAt  DateTime @default(now()) @map("created_at")
  deletedAt  DateTime? @map("deleted_at")
  user       User     @relation(fields: [userId], references: [id])
  program    Program?   @relation(fields: [programId], references: [id])

  @@index([userId])
  @@map("user_images")
}

model UserIntake {
  id                  String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId              String   @map("user_id") @db.Uuid
  sex                 String
  trainingGoal        String   @map("training_goal")
  daysAvailable       Int      @map("days_available")
  dailyBudget         Int?     @map("daily_budget")
  experienceLevel     String?  @map("experience_level")
  age                 Int?
  weight              Int?
  height              Int?
  trainingPreferences String[] @map("training_preferences") @default([])
  additionalInfo      String?  @map("additional_info") @db.Text
  createdAt           DateTime @default(now()) @map("created_at")
  user                User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@unique([userId])
  @@map("user_intake")
}

model PromptLog {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  prompt    String   @db.Text
  response  String   @db.Text
  success   Boolean  @default(true) @map("success")
  inputTokens Int?     @map("input_tokens")
  outputTokens Int?     @map("output_tokens")
  model     String   @map("model")
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("prompt_log")
}

model User {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid @unique
  email       String?       @map("email") /// @TODO: make unique, not helpful during testing tho
  password    String?       @map("password")
  isPremium   Boolean       @default(false) @map("is_premium")
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  
  userImages   UserImages[]
  userIntakes  UserIntake[]
  promptLogs   PromptLog[]
  workoutPlans WorkoutPlan[]
  programs     Program[]
  workoutLogs  WorkoutLog[]

  @@index([email])
  @@map("users")
}

model WorkoutPlan {
  id                     String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId                 String    @map("user_id") @db.Uuid
  programId              String    @map("program_id") @db.Uuid
  bodyFatPercentage      Float?     @map("body_fat_percentage")
  muscleMassDistribution String?    @map("muscle_mass_distribution") @db.Text
  daysPerWeek            Int       @map("days_per_week")
  dailyCalories          Int       @map("daily_calories")
  proteinGrams           Int       @map("protein_grams")
  carbGrams              Int       @map("carb_grams")
  fatGrams               Int       @map("fat_grams")
  mealTiming             String[]  @map("meal_timing") @default([])
  progressionProtocol    String[]  @map("progression_protocol") @default([])
  phase                  Int       @map("phase") @default(1)
  phaseExplanation       String?   @map("phase_explanation") @db.Text
  phaseExpectations      String?   @map("phase_expectations") @db.Text
  phaseKeyPoints         String[]  @map("phase_key_points") @default([])
  splitType              String?   @map("split_type")
  createdAt              DateTime  @default(now()) @map("created_at")
  user                   User      @relation(fields: [userId], references: [id])
  workouts               Workout[]
  program                Program?   @relation(fields: [programId], references: [id])

  @@index([userId])
  @@index([programId])
  @@map("workout_plans")
}

model Workout {
  id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String      @map("name")
  focus         String      @map("focus")
  warmup        String?     @map("warmup") @db.Text
  cooldown      String?     @map("cooldown") @db.Text
  workoutPlanId String      @map("workout_plan_id") @db.Uuid
  dayNumber     Int         @map("day_number")
  workoutPlan   WorkoutPlan @relation(fields: [workoutPlanId], references: [id], onDelete: Cascade)
  exercises     Exercise[]
  workoutLogs   WorkoutLog[]
  createdAt     DateTime    @default(now()) @map("created_at")

  @@index([workoutPlanId])
  @@map("workouts")
}

model ExerciseLibrary {
  id               String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name             String         @unique
  category         String         @default("default")
  equipment        String[]       @default([])
  description      String?        @db.Text
  instructions     String[]       @db.Text @default([])
  commonMistakes   String[]       @db.Text @default([])
  benefits         String[]       @db.Text @default([])
  difficulty       Difficulty     @default(BEGINNER)
  isCompound       Boolean        @default(false)
  movementPattern  MovementPattern @default(PUSH)
  targetMuscles    MuscleGroup[]  @default([])
  secondaryMuscles MuscleGroup[]  @default([])
  videoUrl         String?           @map("video_url")
  variations       ExerciseLibrary[] @relation("ExerciseVariations")
  parentExercise   ExerciseLibrary?  @relation("ExerciseVariations", fields: [parentId], references: [id])
  parentId         String?           @db.Uuid
  exercises        Exercise[]
  createdAt        DateTime       @default(now()) @map("created_at")

  @@index([name])
  @@index([category])
  @@index([equipment])
  @@index([difficulty])
  @@index([isCompound])
  @@index([movementPattern])
  @@index([targetMuscles])
  @@index([secondaryMuscles])
  @@map("exercise_library")
}

model Exercise {
  id                String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  workoutId         String          @map("workout_id") @db.Uuid
  exerciseLibraryId String          @map("exercise_library_id") @db.Uuid
  name              String          @map("name")
  sets              Int
  reps              Int
  restPeriod        Int?            @map("rest_period")
  workout           Workout         @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  exerciseLibrary   ExerciseLibrary @relation(fields: [exerciseLibraryId], references: [id])
  exerciseLogs      ExerciseLog[]
  createdAt         DateTime        @default(now()) @map("created_at")

  @@index([workoutId])
  @@index([exerciseLibraryId])
  @@index([name])
  @@map("exercises")
}

model Program {
  id           String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String
  description  String?      @db.Text
  createdBy    String       @map("created_by") @db.Uuid
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime     @updatedAt @map("updated_at")
  user         User         @relation(fields: [createdBy], references: [id])
  workoutPlans WorkoutPlan[]
  userImages   UserImages[]
  workoutLogs  WorkoutLog[]

  @@index([name])
  @@index([createdBy])
  @@index([description])
  @@map("programs")
}

model WaitlistLead {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email     String   @unique
  source    String?  // e.g., "landing_page"
  status    String?  @default("active") // "active", "converted", "unsubscribed"
  cookie    String?  @map("cookie")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
  @@map("waitlist_leads")
}

enum MuscleGroup {
  // Upper Body - Front
  CHEST
  SHOULDERS
  SHOULDERS_FRONT // anterior deltoid
  SHOULDERS_SIDE  // lateral deltoid
  SHOULDERS_REAR  // posterior deltoid
  BICEPS
  TRICEPS
  FOREARMS
  
  // Upper Body - Back
  UPPER_BACK     // general upper back area
  TRAPS
  TRAPEZIUS
  TRAPEZIUS_UPPER
  TRAPEZIUS_MIDDLE
  TRAPEZIUS_LOWER
  LATS
  RHOMBOIDS
  BACK
  
  // Core
  CORE_FRONT    // rectus abdominis
  CORE_SIDE     // obliques
  LOWER_BACK    // erector spinae
  CORE
  
  // Lower Body - Front
  QUADRICEPS
  HIP_FLEXORS
  
  // Lower Body - Back
  HAMSTRINGS
  GLUTES
  CALVES
  CALVES_OUTER  // gastrocnemius
  CALVES_INNER  // soleus
  
  // Stabilizers
  ROTATOR_CUFF
  SERRATUS
  HIP_ABDUCTORS
  HIP_ADDUCTORS
  
  OTHER
}

enum MovementPattern {
  PUSH
  PULL
  HINGE
  SQUAT
  LUNGE
  CARRY
  ROTATION
  PLANK
  OTHER
}

enum Difficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
  OTHER
}

model WorkoutLog {
  id            String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId        String       @map("user_id") @db.Uuid
  workoutId     String       @map("workout_id") @db.Uuid
  programId     String       @map("program_id") @db.Uuid
  startedAt     DateTime     @default(now()) @map("started_at")
  completedAt   DateTime?    @map("completed_at")
  status        String       @default("in_progress") // in_progress, completed, abandoned
  notes         String?      @db.Text
  
  user          User         @relation(fields: [userId], references: [id])
  workout       Workout      @relation(fields: [workoutId], references: [id])
  program       Program      @relation(fields: [programId], references: [id])
  exerciseLogs  ExerciseLog[]

  @@index([userId])
  @@index([workoutId])
  @@map("workout_logs")
}

model ExerciseLog {
  id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  workoutLogId  String      @map("workout_log_id") @db.Uuid
  exerciseId    String      @map("exercise_id") @db.Uuid
  startedAt     DateTime    @default(now()) @map("started_at")
  completedAt   DateTime?   @map("completed_at")
  notes         String?     @db.Text
  
  workoutLog    WorkoutLog  @relation(fields: [workoutLogId], references: [id])
  exercise      Exercise    @relation(fields: [exerciseId], references: [id])
  setLogs       SetLog[]

  @@index([workoutLogId])
  @@index([exerciseId])
  @@map("exercise_logs")
}

model SetLog {
  id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  exerciseLogId String      @map("exercise_log_id") @db.Uuid
  setNumber     Int         @map("set_number")
  weight        Float?      // Optional for bodyweight exercises
  reps          Int
  notes         String?     @db.Text
  completedAt   DateTime    @default(now()) @map("completed_at")
  
  exerciseLog   ExerciseLog @relation(fields: [exerciseLogId], references: [id])

  @@index([exerciseLogId])
  @@map("set_logs")
}
